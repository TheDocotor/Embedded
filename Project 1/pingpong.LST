A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN pingpong.OBJ
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE pingpong.asm XR GEN DB EP NOMOD51 INCDIR(C:\SiLabs\MCU\Inc) 

LOC  OBJ            LINE     SOURCE

                       1     ;==========================================================
                       2     ; Program Name: pingpong.asm
                       3     ;
                       4     ; Authors: Ryan Enslow & Garrett Nadauld
                       5     ;
                       6     ; Description:
                       7     ; This program is a two player ping pong game devolped on the 8051. The game will begin by 
                       8     ;       a player serving the ball by pressing a button. The switches will be used to config
                             ure the
                       9     ; game. Switches 1&2 will decide the hit window for player 1. Switches 7&8 will decide the 
                      10     ; hit window for player 2. Switches 4&5 will be used to select the speed of the ball. The
                      11     ; starting side of the ball changes at the start of each game. To restart the game the reset
                      12     ; button will be pressed.
                      13     ;
                      14     ; Company: Weber State University 
                      15     ;
                      16     ; Date            Version        Description
                      17     ; ----            -------        -----------
                      18     ; 2/6/2024    V0.1            Initial version
                      19     ; 2/27/2024     V1.0                                            First Working Version
                      20     ; 2/28/2024     V1.1                                            Added Comments for clarity
                      21     ;==========================================================
                      22     ;$include (c8051f020.inc)
                +1    23     ;-----------------------------------------------------------------------------
                +1    24     ;       
                +1    25     ;       
                +1    26     ;
                +1    27     ;
                +1    28     ;       FILE NAME       : C8051F020.INC 
                +1    29     ;       TARGET MCUs     : C8051F020, 'F021, 'F022, 'F023 
                +1    30     ;       DESCRIPTION     : Register/bit definitions for the C8051F02x product family.  
                +1    31     ;
                +1    32     ;       REVISION 1.0    
                +1    33     ;
                +1    34     ;-----------------------------------------------------------------------------
                +1    35     ;REGISTER DEFINITIONS
                +1    36     ;
  0080          +1    37     P0       DATA  080H   ; PORT 0
  0081          +1    38     SP       DATA  081H   ; STACK POINTER
  0082          +1    39     DPL      DATA  082H   ; DATA POINTER - LOW BYTE
  0083          +1    40     DPH      DATA  083H   ; DATA POINTER - HIGH BYTE
  0084          +1    41     P4       DATA  084H   ; PORT 4
  0085          +1    42     P5       DATA  085H   ; PORT 5
  0086          +1    43     P6       DATA  086H   ; PORT 6
  0087          +1    44     PCON     DATA  087H   ; POWER CONTROL
  0088          +1    45     TCON     DATA  088H   ; TIMER CONTROL
  0089          +1    46     TMOD     DATA  089H   ; TIMER MODE
  008A          +1    47     TL0      DATA  08AH   ; TIMER 0 - LOW BYTE
  008B          +1    48     TL1      DATA  08BH   ; TIMER 1 - LOW BYTE
  008C          +1    49     TH0      DATA  08CH   ; TIMER 0 - HIGH BYTE
  008D          +1    50     TH1      DATA  08DH   ; TIMER 1 - HIGH BYTE
  008E          +1    51     CKCON    DATA  08EH   ; CLOCK CONTROL
  008F          +1    52     PSCTL    DATA  08FH   ; PROGRAM STORE R/W CONTROL
  0090          +1    53     P1       DATA  090H   ; PORT 1
  0091          +1    54     TMR3CN   DATA  091H   ; TIMER 3 CONTROL
  0092          +1    55     TMR3RLL  DATA  092H   ; TIMER 3 RELOAD REGISTER - LOW BYTE
  0093          +1    56     TMR3RLH  DATA  093H   ; TIMER 3 RELOAD REGISTER - HIGH BYTE
  0094          +1    57     TMR3L    DATA  094H   ; TIMER 3 - LOW BYTE
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     2

  0095          +1    58     TMR3H    DATA  095H   ; TIMER 3 - HIGH BYTE
  0096          +1    59     P7       DATA  096H   ; PORT 7
  0098          +1    60     SCON0    DATA  098H   ; SERIAL PORT 0 CONTROL
  0099          +1    61     SBUF0    DATA  099H   ; SERIAL PORT 0 BUFFER
  009A          +1    62     SPI0CFG  DATA  09AH   ; SERIAL PERIPHERAL INTERFACE 0 CONFIGURATION
  009B          +1    63     SPI0DAT  DATA  09BH   ; SERIAL PERIPHERAL INTERFACE 0 DATA
  009C          +1    64     ADC1     DATA  09CH   ; ADC 1 DATA
  009D          +1    65     SPI0CKR  DATA  09DH   ; SERIAL PERIPHERAL INTERFACE 0 CLOCK RATE CONTROL
  009E          +1    66     CPT0CN   DATA  09EH   ; COMPARATOR 0 CONTROL
  009F          +1    67     CPT1CN   DATA  09FH   ; COMPARATOR 1 CONTROL 
  00A0          +1    68     P2       DATA  0A0H   ; PORT 2
  00A1          +1    69     EMI0TC   DATA  0A1H   ; EMIF TIMING CONTROL
  00A3          +1    70     EMI0CF   DATA  0A3H   ; EXTERNAL MEMORY INTERFACE (EMIF) CONFIGURATION
  00A4          +1    71     P0MDOUT  DATA  0A4H   ; PORT 0 OUTPUT MODE CONFIGURATION
  00A5          +1    72     P1MDOUT  DATA  0A5H   ; PORT 1 OUTPUT MODE CONFIGURATION
  00A6          +1    73     P2MDOUT  DATA  0A6H   ; PORT 2 OUTPUT MODE CONFIGURATION
  00A7          +1    74     P3MDOUT  DATA  0A7H   ; PORT 3 OUTPUT MODE CONFIGURATION
  00A8          +1    75     IE       DATA  0A8H   ; INTERRUPT ENABLE
  00A9          +1    76     SADDR0   DATA  0A9H   ; SERIAL PORT 0 SLAVE ADDRESS
  00AA          +1    77     ADC1CN  DATA  0AAH   ; ADC 1 CONTROL
  00AB          +1    78     ADC1CF   DATA  0ABH   ; ADC 1 ANALOG MUX CONFIGURATION
  00AC          +1    79     AMX1SL   DATA  0ACH   ; ADC 1 ANALOG MUX CHANNEL SELECT
  00AD          +1    80     P3IF     DATA  0ADH   ; PORT 3 EXTERNAL INTERRUPT FLAGS
  00AE          +1    81     SADEN1   DATA  0AEH   ; SERIAL PORT 1 SLAVE ADDRESS MASK
  00AF          +1    82     EMI0CN   DATA  0AFH   ; EXTERNAL MEMORY INTERFACE CONTROL
  00B0          +1    83     P3       DATA  0B0H   ; PORT 3
  00B1          +1    84     OSCXCN   DATA  0B1H   ; EXTERNAL OSCILLATOR CONTROL
  00B2          +1    85     OSCICN   DATA  0B2H   ; INTERNAL OSCILLATOR CONTROL
  00B5          +1    86     P74OUT   DATA  0B5H   ; PORTS 4 - 7 OUTPUT MODE
  00B6          +1    87     FLSCL    DATA  0B6H   ; FLASH MEMORY TIMING PRESCALER
  00B7          +1    88     FLACL    DATA  0B7H   ; FLASH ACESS LIMIT 
  00B8          +1    89     IP       DATA  0B8H   ; INTERRUPT PRIORITY
  00B9          +1    90     SADEN0   DATA  0B9H   ; SERIAL PORT 0 SLAVE ADDRESS MASK
  00BA          +1    91     AMX0CF   DATA  0BAH   ; ADC 0 MUX CONFIGURATION
  00BB          +1    92     AMX0SL   DATA  0BBH   ; ADC 0 MUX CHANNEL SELECTION
  00BC          +1    93     ADC0CF   DATA  0BCH   ; ADC 0 CONFIGURATION
  00BD          +1    94     P1MDIN   DATA  0BDH   ; PORT 1 INPUT MODE
  00BE          +1    95     ADC0L    DATA  0BEH   ; ADC 0 DATA - LOW BYTE
  00BF          +1    96     ADC0H    DATA  0BFH   ; ADC 0 DATA - HIGH BYTE 
  00C0          +1    97     SMB0CN   DATA  0C0H   ; SMBUS 0 CONTROL
  00C1          +1    98     SMB0STA  DATA  0C1H   ; SMBUS 0 STATUS
  00C2          +1    99     SMB0DAT  DATA  0C2H   ; SMBUS 0 DATA 
  00C3          +1   100     SMB0ADR  DATA  0C3H   ; SMBUS 0 SLAVE ADDRESS
  00C4          +1   101     ADC0GTL  DATA  0C4H   ; ADC 0 GREATER-THAN REGISTER - LOW BYTE
  00C5          +1   102     ADC0GTH  DATA  0C5H   ; ADC 0 GREATER-THAN REGISTER - HIGH BYTE
  00C6          +1   103     ADC0LTL  DATA  0C6H   ; ADC 0 LESS-THAN REGISTER - LOW BYTE
  00C7          +1   104     ADC0LTH  DATA  0C7H   ; ADC 0 LESS-THAN REGISTER - HIGH BYTE
  00C8          +1   105     T2CON    DATA  0C8H   ; TIMER 2 CONTROL
  00C9          +1   106     T4CON    DATA  0C9H   ; TIMER 4 CONTROL
  00CA          +1   107     RCAP2L   DATA  0CAH   ; TIMER 2 CAPTURE REGISTER - LOW BYTE
  00CB          +1   108     RCAP2H   DATA  0CBH   ; TIMER 2 CAPTURE REGISTER - HIGH BYTE
  00CC          +1   109     TL2      DATA  0CCH   ; TIMER 2 - LOW BYTE
  00CD          +1   110     TH2      DATA  0CDH   ; TIMER 2 - HIGH BYTE
  00CF          +1   111     SMB0CR   DATA  0CFH   ; SMBUS 0 CLOCK RATE
  00D0          +1   112     PSW      DATA  0D0H   ; PROGRAM STATUS WORD
  00D1          +1   113     REF0CN   DATA  0D1H   ; VOLTAGE REFERENCE 0 CONTROL
  00D2          +1   114     DAC0L    DATA  0D2H   ; DAC 0 REGISTER - LOW BYTE
  00D3          +1   115     DAC0H    DATA  0D3H   ; DAC 0 REGISTER - HIGH BYTE
  00D4          +1   116     DAC0CN   DATA  0D4H   ; DAC 0 CONTROL
  00D5          +1   117     DAC1L    DATA  0D5H   ; DAC 1 REGISTER - LOW BYTE
  00D6          +1   118     DAC1H    DATA  0D6H   ; DAC 1 REGISTER - HIGH BYTE
  00D7          +1   119     DAC1CN   DATA  0D7H   ; DAC 1 CONTROL
  00D8          +1   120     PCA0CN   DATA  0D8H   ; PCA 0 COUNTER CONTROL
  00D9          +1   121     PCA0MD   DATA  0D9H   ; PCA 0 COUNTER MODE
  00DA          +1   122     PCA0CPM0 DATA  0DAH   ; CONTROL REGISTER FOR PCA 0 MODULE 0
  00DB          +1   123     PCA0CPM1 DATA  0DBH   ; CONTROL REGISTER FOR PCA 0 MODULE 1
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     3

  00DC          +1   124     PCA0CPM2 DATA  0DCH   ; CONTROL REGISTER FOR PCA 0 MODULE 2
  00DD          +1   125     PCA0CPM3 DATA  0DDH   ; CONTROL REGISTER FOR PCA 0 MODULE 3
  00DE          +1   126     PCA0CPM4 DATA  0DEH   ; CONTROL REGISTER FOR PCA 0 MODULE 4
  00E0          +1   127     ACC      DATA  0E0H   ; ACCUMULATOR
  00E1          +1   128     XBR0     DATA  0E1H   ; DIGITAL CROSSBAR CONFIGURATION REGISTER 0
  00E2          +1   129     XBR1     DATA  0E2H   ; DIGITAL CROSSBAR CONFIGURATION REGISTER 1
  00E3          +1   130     XBR2     DATA  0E3H   ; DIGITAL CROSSBAR CONFIGURATION REGISTER 2
  00E4          +1   131     RCAP4L   DATA  0E4H   ; TIMER 4 CAPTURE REGISTER - LOW BYTE
  00E5          +1   132     RCAP4H   DATA  0E5H   ; TIMER 4 CAPTURE REGISTER - HIGH BYTE
  00E6          +1   133     EIE1     DATA  0E6H   ; EXTERNAL INTERRUPT ENABLE 1
  00E7          +1   134     EIE2     DATA  0E7H   ; EXTERNAL INTERRUPT ENABLE 2
  00E8          +1   135     ADC0CN   DATA  0E8H   ; ADC 0 CONTROL
  00E9          +1   136     PCA0L    DATA  0E9H   ; PCA 0 TIMER - LOW BYTE
  00EA          +1   137     PCA0CPL0 DATA  0EAH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 0 - LOW BYTE
  00EB          +1   138     PCA0CPL1 DATA  0EBH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 1 - LOW BYTE
  00EC          +1   139     PCA0CPL2 DATA  0ECH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 2 - LOW BYTE
  00ED          +1   140     PCA0CPL3 DATA  0EDH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 3 - LOW BYTE
  00EE          +1   141     PCA0CPL4 DATA  0EEH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 4 - LOW BYTE
  00EF          +1   142     RSTSRC   DATA  0EFH   ; RESET SOURCE 
  00F0          +1   143     B        DATA  0F0H   ; B REGISTER
  00F1          +1   144     SCON1    DATA  0F1H   ; SERIAL PORT 1 CONTROL
  00F2          +1   145     SBUF1    DATA  0F2H   ; SERAIL PORT 1 DATA
  00F3          +1   146     SADDR1   DATA  0F3H   ; SERAIL PORT 1 
  00F4          +1   147     TL4      DATA  0F4H   ; TIMER 4 DATA - LOW BYTE
  00F5          +1   148     TH4      DATA  0F5H   ; TIMER 4 DATA - HIGH BYTE
  00F6          +1   149     EIP1     DATA  0F6H   ; EXTERNAL INTERRUPT PRIORITY REGISTER 1
  00F7          +1   150     EIP2     DATA  0F7H   ; EXTERNAL INTERRUPT PRIORITY REGISTER 2
  00F8          +1   151     SPI0CN   DATA  0F8H   ; SERIAL PERIPHERAL INTERFACE 0 CONTROL 
  00F9          +1   152     PCA0H    DATA  0F9H   ; PCA 0 TIMER - HIGH BYTE
  00FA          +1   153     PCA0CPH0 DATA  0FAH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 0 - HIGH BYTE
  00FB          +1   154     PCA0CPH1 DATA  0FBH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 1 - HIGH BYTE
  00FC          +1   155     PCA0CPH2 DATA  0FCH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 2 - HIGH BYTE
  00FD          +1   156     PCA0CPH3 DATA  0FDH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 3 - HIGH BYTE
  00FE          +1   157     PCA0CPH4 DATA  0FEH   ; CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 4 - HIGH BYTE
  00FF          +1   158     WDTCN    DATA  0FFH   ; WATCHDOG TIMER CONTROL 
                +1   159     ;
                +1   160     ;------------------------------------------------------------------------------
                +1   161     ;BIT DEFINITIONS
                +1   162     ;
                +1   163     ; TCON 88H
  0088          +1   164     IT0      BIT   TCON.0 ; EXT. INTERRUPT 0 TYPE
  0089          +1   165     IE0      BIT   TCON.1 ; EXT. INTERRUPT 0 EDGE FLAG
  008A          +1   166     IT1      BIT   TCON.2 ; EXT. INTERRUPT 1 TYPE
  008B          +1   167     IE1      BIT   TCON.3 ; EXT. INTERRUPT 1 EDGE FLAG
  008C          +1   168     TR0      BIT   TCON.4 ; TIMER 0 ON/OFF CONTROL
  008D          +1   169     TF0      BIT   TCON.5 ; TIMER 0 OVERFLOW FLAG
  008E          +1   170     TR1      BIT   TCON.6 ; TIMER 1 ON/OFF CONTROL
  008F          +1   171     TF1      BIT   TCON.7 ; TIMER 1 OVERFLOW FLAG
                +1   172     ;
                +1   173     ; SCON0 98H
  0098          +1   174     RI       BIT   SCON0.0 ; RECEIVE INTERRUPT FLAG
  0099          +1   175     TI       BIT   SCON0.1 ; TRANSMIT INTERRUPT FLAG
  009A          +1   176     RB8      BIT   SCON0.2 ; RECEIVE BIT 8
  009B          +1   177     TB8      BIT   SCON0.3 ; TRANSMIT BIT 8
  009C          +1   178     REN      BIT   SCON0.4 ; RECEIVE ENABLE
  009D          +1   179     SM2      BIT   SCON0.5 ; MULTIPROCESSOR COMMUNICATION ENABLE
  009E          +1   180     SM1      BIT   SCON0.6 ; SERIAL MODE CONTROL BIT 1
  009F          +1   181     SM0      BIT   SCON0.7 ; SERIAL MODE CONTROL BIT 0
                +1   182     ; 
                +1   183     ; IE A8H
  00A8          +1   184     EX0      BIT   IE.0   ; EXTERNAL INTERRUPT 0 ENABLE
  00A9          +1   185     ET0      BIT   IE.1   ; TIMER 0 INTERRUPT ENABLE
  00AA          +1   186     EX1      BIT   IE.2   ; EXTERNAL INTERRUPT 1 ENABLE
  00AB          +1   187     ET1      BIT   IE.3   ; TIMER 1 INTERRUPT ENABLE
  00AC          +1   188     ES       BIT   IE.4   ; SERIAL PORT INTERRUPT ENABLE
  00AD          +1   189     ET2      BIT   IE.5   ; TIMER 2 INTERRUPT ENABLE
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     4

  00AF          +1   190     EA       BIT   IE.7   ; GLOBAL INTERRUPT ENABLE
                +1   191     ;
                +1   192     ; IP B8H
  00B8          +1   193     PX0      BIT   IP.0   ; EXTERNAL INTERRUPT 0 PRIORITY
  00B9          +1   194     PT0      BIT   IP.1   ; TIMER 0 PRIORITY
  00BA          +1   195     PX1      BIT   IP.2   ; EXTERNAL INTERRUPT 1 PRIORITY
  00BB          +1   196     PT1      BIT   IP.3   ; TIMER 1 PRIORITY
  00BC          +1   197     PS       BIT   IP.4   ; SERIAL PORT PRIORITY
  00BD          +1   198     PT2      BIT   IP.5   ; TIMER 2 PRIORITY
                +1   199     ;
                +1   200     ; SMB0CN C0H
  00C0          +1   201     SMBTOE   BIT   SMB0CN.0 ; SMBUS 0 TIMEOUT ENABLE
  00C1          +1   202     SMBFTE   BIT   SMB0CN.1 ; SMBUS 0 FREE TIMER ENABLE
  00C2          +1   203     AA       BIT   SMB0CN.2 ; SMBUS 0 ASSERT/ACKNOWLEDGE FLAG
  00C3          +1   204     SI       BIT   SMB0CN.3 ; SMBUS 0 INTERRUPT PENDING FLAG
  00C4          +1   205     STO      BIT   SMB0CN.4 ; SMBUS 0 STOP FLAG
  00C5          +1   206     STA      BIT   SMB0CN.5 ; SMBUS 0 START FLAG
  00C6          +1   207     ENSMB    BIT   SMB0CN.6 ; SMBUS 0 ENABLE 
                +1   208     ;
                +1   209     ; T2CON C8H
  00C8          +1   210     CPRL2    BIT   T2CON.0 ; CAPTURE OR RELOAD SELECT
  00C9          +1   211     CT2      BIT   T2CON.1 ; TIMER OR COUNTER SELECT
  00CA          +1   212     TR2      BIT   T2CON.2 ; TIMER 2 ON/OFF CONTROL
  00CB          +1   213     EXEN2    BIT   T2CON.3 ; TIMER 2 EXTERNAL ENABLE FLAG
  00CC          +1   214     TCLK     BIT   T2CON.4 ; TRANSMIT CLOCK FLAG
  00CD          +1   215     RCLK     BIT   T2CON.5 ; RECEIVE CLOCK FLAG
  00CE          +1   216     EXF2     BIT   T2CON.6 ; EXTERNAL FLAG
  00CF          +1   217     TF2      BIT   T2CON.7 ; TIMER 2 OVERFLOW FLAG
                +1   218     ;
                +1   219     ; PSW D0H
  00D0          +1   220     P        BIT   PSW.0  ; ACCUMULATOR PARITY FLAG
  00D1          +1   221     F1       BIT   PSW.1  ; USER FLAG 1
  00D2          +1   222     OV       BIT   PSW.2  ; OVERFLOW FLAG
  00D3          +1   223     RS0      BIT   PSW.3  ; REGISTER BANK SELECT 0
  00D4          +1   224     RS1      BIT   PSW.4  ; REGISTER BANK SELECT 1
  00D5          +1   225     F0       BIT   PSW.5  ; USER FLAG 0
  00D6          +1   226     AC       BIT   PSW.6  ; AUXILIARY CARRY FLAG
  00D7          +1   227     CY       BIT   PSW.7  ; CARRY FLAG
                +1   228     ;
                +1   229     ; PCA0CN D8H
  00D8          +1   230     CCF0     BIT   PCA0CN.0 ; PCA 0 MODULE 0 INTERRUPT FLAG
  00D9          +1   231     CCF1     BIT   PCA0CN.1 ; PCA 0 MODULE 1 INTERRUPT FLAG
  00DA          +1   232     CCF2     BIT   PCA0CN.2 ; PCA 0 MODULE 2 INTERRUPT FLAG
  00DB          +1   233     CCF3     BIT   PCA0CN.3 ; PCA 0 MODULE 3 INTERRUPT FLAG
  00DC          +1   234     CCF4     BIT   PCA0CN.4 ; PCA 0 MODULE 4 INTERRUPT FLAG
  00DE          +1   235     CR       BIT   PCA0CN.6 ; PCA 0 COUNTER RUN CONTROL BIT
  00DF          +1   236     CF       BIT   PCA0CN.7 ; PCA 0 COUNTER OVERFLOW FLAG
                +1   237     ;
                +1   238     ; ADC0CN E8H
  00E8          +1   239     AD0LJST  BIT   ADC0CN.0 ; ADC 0 RIGHT JUSTIFY DATA BIT
  00E9          +1   240     AD0WINT  BIT   ADC0CN.1 ; ADC 0 WINDOW COMPARE INTERRUPT FLAG
  00EA          +1   241     AD0STM0  BIT   ADC0CN.2 ; ADC 0 START OF CONVERSION MODE BIT 0
  00EB          +1   242     AD0STM1  BIT   ADC0CN.3 ; ADC 0 START OF CONVERSION MODE BIT 1
  00EC          +1   243     AD0BUSY  BIT   ADC0CN.4 ; ADC 0 BUSY FLAG
  00ED          +1   244     AD0INT   BIT   ADC0CN.5 ; ADC 0 CONVERISION COMPLETE INTERRUPT FLAG 
  00EE          +1   245     AD0TM    BIT   ADC0CN.6 ; ADC 0 TRACK MODE
  00EF          +1   246     AD0EN    BIT   ADC0CN.7 ; ADC 0 ENABLE
                +1   247     ;
                +1   248     ; SPI0CN F8H
  00F8          +1   249     SPIEN    BIT   SPI0CN.0 ; SPI 0 SPI ENABLE
  00F9          +1   250     MSTEN    BIT   SPI0CN.1 ; SPI 0 MASTER ENABLE
  00FA          +1   251     SLVSEL   BIT   SPI0CN.2 ; SPI 0 SLAVE SELECT
  00FB          +1   252     TXBSY    BIT   SPI0CN.3 ; SPI 0 TX BUSY FLAG
  00FC          +1   253     RXOVRN   BIT   SPI0CN.4 ; SPI 0 RX OVERRUN FLAG
  00FD          +1   254     MODF     BIT   SPI0CN.5 ; SPI 0 MODE FAULT FLAG
  00FE          +1   255     WCOL     BIT   SPI0CN.6 ; SPI 0 WRITE COLLISION FLAG
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     5

  00FF          +1   256     SPIF     BIT   SPI0CN.7 ; SPI 0 INTERRUPT FLAG
                     257     
                     258     
----                 259                                     dseg at 30h
0030                 260     Position:               ds 1
0031                 261     old_buttons:    ds 1
0032                 262     l_config:                       ds 1
0033                 263     r_config:                       ds 1
0034                 264     s_config:                       ds 1 
0035                 265     count:                          ds 1
                     266                                                                                     
----                 267     bseg
0000                 268     start_side:     dbit 1          ;1 Start on Right side, 0 Start on left side
0001                 269     direction:              dbit 1          ;1 Moving right, 0 moving left
                     270     
----                 271                     cseg
                     272     
0000 75FFDE          273         mov wdtcn,#0DEh           ;disable watchdog
0003 75FFAD          274         mov wdtcn,#0ADh
0006 75E340          275         mov xbr2,#40h             ;enable I/O
                     276     
0009 D2A4            277         setb         P2.4               ;assign buttons
000B D2A6            278         setb         P2.6
                     279                             
000D B200            280                     cpl start_side                                          ;Swap serving side 
                             upon reset, 0 left serve 1 right serve
000F A200            281                     mov c, start_side               
0011 B3              282                     cpl c                                                                      
                                          ;Sets direction based upon serving side, 0 moving left, 1 moving right
0012 9201            283                     mov direction, c
0014 300035          284                     jnb start_side, left_side       ;Jumps to left serve if start side 0, else 
                             continues onto right side
                     285     
                     286     ;---------------------------------Right side config and wait for right button to serve-----
                             ----------------------------------------------------
                     287     
0017 753000          288     right_side: mov position, #00h  ;sets led to far right
001A 11FD            289                                             call display                            
001C A990            290                                             mov R1, P1                                         
                                  ;Pulls switches and stores them in R1 1/2 left window configuration, 4/5 speed configu
                             ration, 7/8 right window configuration, 3/6 do nothing
001E E9              291                                             mov A, R1
001F 5403            292                                             anl A, #00000011b                       ;Isolates b
                             its for configuring the left window
0021 F532            293                                             mov l_config, A
0023 740A            294                                             mov A, #10                                         
                                  ;10 will be the base window, meaning that l_config must be greater than 0 in order to have a valid window
0025 9532            295                                             subb A, l_config                        ;10 - l_con
                             fig sets up the new l_config ranging from 9-7
0027 F532            296                                             mov l_config, A
0029 E9              297                                             mov A, R1
002A 5418            298                                             anl A, #00011000b                       ;Isolates b
                             its for configuring the speed
002C 23              299                                             rl A
002D C4              300                                             swap A                                             
                                          ;Moves speed bits to least significant bits
002E F534            301                                             mov s_config, A
0030 E9              302                                             mov A, R1
0031 54C0            303                                             anl A, #11000000b                       ;Isolates b
                             its for configuring the right window
0033 C4              304                                             swap A
0034 03              305                                             rr A
0035 03              306                                             rr A                                               
                                                  ;Moves right window bits to least significant bits
0036 F533            307                                             mov r_config, A 
0038 E534            308                                             mov A, s_config
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     6

003A 7004            309                                             jnz speedy                                         
                                  ;If speed configuration is set jump to section to speed the ball up
003C 7819            310                                             mov R0, #25                                        
                                  ;Speed is (25 * 10ms = 250ms)
003E 8002            311                                             jmp proceed                                        
                                  ;Jump over speedy so as to not configure R0 to 8
                     312     
0040 7808            313     speedy:         mov R0, #8                                              ;Speed is (8 * 10ms
                              = 80ms)                             
                     314                                                                                             
0042 8835            315     proceed:        mov count, R0                                   ;Count will be used as the 
                             number of times delay is called 
0044 1200F3          316                                             lcall check_buttons     ;See if any buttons have be
                             en pressed   
0047 20E437          317                                             jb ACC.4, main                          ;If right b
                             utton has been pressed move on
004A 80CB            318                                             jmp right_side                          ;If no butt
                             on press loop back
                     319     
                     320     ;---------------------------------Left side config and wait for left button to serve-------
                             --------------------------------------------------
                     321     
004C 753009          322     left_side:      mov position, #09h      ;sets led to far left
004F 11FD            323                                                     call display            
0051 A990            324                                                     mov R1, P1                                 
                                  ;Pulls switches and stores them in R1 1/2 left window configuration, 4/5 speed configu
                             ration, 7/8 right window configuration, 3/6 do nothing
0053 E9              325                                                     mov A, R1
0054 5403            326                                                     anl A, #00000011b               ;Isolates b
                             its for configuring the left window
0056 F532            327                                                     mov l_config, A                 ;10 will be
                              the base window, meaning that l_config must be greater than 0 in order to have a valid window
0058 740A            328                                                     mov A, #10                                 
                                  ;10 - l_config sets up the new l_config ranging from 9-7
005A 9532            329                                                     subb A, l_config
005C F532            330                                                     mov l_config, A
005E E9              331                                                     mov A, R1
005F 5418            332                                                     anl A, #00011000b               ;Isolates b
                             its for configuring the speed
0061 23              333                                                     rl      A
0062 C4              334                                                     swap A                                     
                                          ;Moves speed bits to least significant bits
0063 F534            335                                                     mov s_config, A
0065 E9              336                                                     mov A, R1
0066 54C0            337                                                     anl A, #11000000b               ;Isolates b
                             its for configuring the right window
0068 C4              338                                                     swap A
0069 03              339                                                     rr A
006A 03              340                                                     rr A                                       
                                                  ;Moves right window bits to least significant bits
006B F533            341                                                     mov r_config, A         
006D E534            342                                                     mov A, s_config
006F 7004            343                                                     jnz speedy_l                            ;If
                              speed configuration is set jump to section to speed the ball up
0071 7819            344                                                     mov R0, #25                                
                                  ;speed is (25 * 10ms = 250ms)
0073 8002            345                                                     jmp proceed_l                           ;Ju
                             mp over speedy so as to not configure R0 to 8
                     346     
0075 7808            347     speedy_l:               mov R0, #8                                      ;Speed is (8 * 10ms
                              = 80ms)                                     
                     348                                                                                             
0077 8835            349     proceed_l:      mov count, R0                           ;Count will be used as the number o
                             f times delay is called 
0079 1200F3          350                                                     lcall check_buttons ;See if any buttons hav
                             e been pressed       
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     7

007C 20E602          351                                                     jb ACC.6, main                  ;If left bu
                             tton has been pressed move on
007F 80CB            352                                                     jmp left_side                           ;If
                              no button press loop back
                     353     
                     354     ;---------------------------------------MAIN------------------------------------------------
                     355     
0081 11EA            356     main:   call DELAY                      ;call delay to ensure buttons are checked every 10ms
0083 8002            357                             jmp check_dir           ;Check which way ball is moving and do subs
                             equent actions
0085 80FA            358                             jmp main
                     359                                     
                     360     ;-----------------------Right or Left Window Check and Return the ball if in window and but
                             ton pressed------------------
                     361     
0087 300102          362     check_dir:      jnb direction, check_left_window ;If moving left check if ball is in left w
                             indow
008A 8016            363                                                     jmp check_right_window                     
                                           ;Else check if we are in the right window
                     364     
008C E530            365     check_left_window: mov A, position
008E B53200          366                                                                              CJNE A, l_config, 
                             NOTEQUAL_L   ;See if position is greater than or less than left window 
                     367     
0091 400A            368     NOTEQUAL_L:     JC GREATER_L                            ;If carry was set we are not in the
                              window
0093 11F3            369                                                             CALL check_buttons
0095 30E620          370                                                             jnb Acc.6, mov_led      ;If left bu
                             tton was not pressed continue moving led
0098 B201            371                                                             CPL direction                      
                                  ;If left button was pressed change direction of ball
009A 0200B8          372                                                             LJMP mov_led
                     373     
009D 11F3            374     GREATER_L:              CALL check_buttons              ;Updates the buttons 10ms no matter
                              the outcome
009F 0200B8          375                                                             LJMP mov_led
                     376     
00A2 E530            377     check_right_window: mov A, position
00A4 B53300          378                                                                                     CJNE A, r_c
                             onfig, NOTEQUAL      ;See if position is greater than or less than right window 
                     379     
00A7 500A            380     NOTEQUAL: JNC GREATER                                           ;If carry was not set we ar
                             e not in right window 
00A9 11F3            381                                             CALL check_buttons              ;If we are in windo
                             w see if any buttons were pressed
00AB 30E40A          382                                             jnb Acc.4, mov_led              ;If right button wa
                             s not pressed continue moving ball
00AE B201            383                                             CPL direction                                   ;If
                              right button was pressed reverse direction
00B0 0200B8          384                                             LJMP mov_led
                     385     
00B3 11F3            386     GREATER:        CALL check_buttons              ;Updates the buttons 10ms no matter the out
                             come
00B5 0200B8          387                                             LJMP mov_led                                    ;Th
                             is section could be removed and consolidated to one Greater condition
                     388     
                     389     ;---------------------Moves LED Left or Right Depending on Direction-----------------------
                             --------------------
00B8 30010F          390     mov_led:        jnb direction, l_led    ;If direction is 0 move led to the left
00BB D53507          391                                             djnz count, mov_on              ;Decrement count un
                             til 0 to run full 80 or 250 ms depending on speed configuration
00BE 8835            392                                             mov count, R0                                   ;Re
                             set count once it has reached 0
00C0 1530            393                                             dec position                                    ;Mo
                             ve led to the right 
00C2 0200D4          394                                             LJMP End_Game                                   ;Af
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     8

                             ter led has moved see if game is over
                     395     
00C5 11FD            396     mov_on:         call display                                    ;If count hasn't reched zer
                             o just update display and return to main
00C7 020081          397                                             LJMP main
                     398     
00CA D535F8          399     l_led:          djnz count, mov_on              ;Decrement count until 0 to run full 80 or 
                             250 ms depending on speed configuration
00CD 8835            400                                             mov count, R0                                   ;Re
                             set count once it has reached 0
00CF 0530            401                                             inc position                                    ;Mo
                             ve led to the left
00D1 0200D4          402                                             LJMP End_Game                                   ;Af
                             ter led has moved see if game is over
                     403     
                     404     ;----------------------Game over Criteria------------------------------------------        
                                                          
00D4 E530            405     End_Game:       mov     A, position
00D6 B4FF0A          406                             CJNE    A, #0FFh, TEN           ;If position has run over 0 then th
                             e game over else check other condition
00D9 43B0FF          407                                                     ORL   P3, #0FFh                         ;Tu
                             rns off LEDs due to a bug that lights the 1st and last LED
00DC 43A003          408                             ORL   P2, #03h
00DF C2B0            409                                                     clr     P3.0                               
                                          ;Turns on far right LED
00E1 8061            410                             SJMP  OVER                                              ;End game
                     411     
00E3 E530            412     TEN:                    mov   A, position
00E5 B40ADD          413                             CJNE  A, #0Ah, mov_on   ;If position = 10 then the game is over
00E8 805A            414                             SJMP  OVER              
                     415     
                     416     ;----------------------Time delay of 10ms-------------------------------------------
00EA 7A43            417     DELAY:                                  mov     R2, #67                                    
                                  ;Load R2 with 67
00EC 7B64            418     outer_loop:     mov     R3, #100                                        ;Load R3 with 100  
                                          100 * 67 * 1.5 us = 10ish ms
00EE DBFE            419     nested_loop:    DJNZ    R3, nested_loop         ;Stay here till R3 = 0
00F0 DAFA            420                                             DJNZ    R2, outer_loop          ;Stay here till R2 
                             = 0
00F2 22              421                                             RET
                     422     
                     423     ;------------------------Check The Buttons-----------------------------------------------
00F3 E5A0            424     Check_buttons:  mov A, P2
00F5 F4              425                                             cpl A                           ; CPL inputs since 
                             they are active low
00F6 C531            426                                             XCH A, old_buttons              ; takes the input o
                             f the new buttons and stores it, passes the old buttons into acc
00F8 6531            427                                             XRL A, old_buttons              ; If the buttons ar
                             e the same change them to 0's
00FA 5531            428                                             ANL A, old_buttons              ; If buttons are di
                             fferent and pressed they stay
00FC 22              429                                             RET
                     430     ;---------------------------Display Update-----------------------------------------------
00FD 43B0FF          431     Display:        ORL P3, #0FFh                   ;Turn off All LEDS      
0100 43A003          432                     ORL P2, #03h
0103 E530            433                     mov A, position         ;Load the current position of the LED
0105 310E            434                     CALL not_one
0107 22              435                                             RET
                     436     ;This section down to not nine will turn on the correct LED dependent on the current positi
                             on                                           
0108 B40003          437     not_zero:       CJNE A, #00h, not_one           ;check if position is 0
010B C2B0            438                     CLR P3.0
010D 22              439                     RET
                     440     
010E B40103          441     not_one:        CJNE A, #01h, not_two           ;check if position is 1
0111 C2B1            442                     CLR P3.1
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE     9

0113 22              443                     RET
                     444     
0114 B40203          445     not_two:        CJNE A, #02h, not_three;        ;check if position is 2
0117 C2B2            446                     CLR P3.2
0119 22              447                     RET
                     448     
011A B40303          449     not_three:      CJNE A, #03h, not_four          ;check if position is 3
011D C2B3            450                     CLR P3.3
011F 22              451                     RET
                     452     
0120 B40403          453     not_four:       CJNE A, #04h, not_five          ;check if position is 4
0123 C2B4            454                     CLR P3.4
0125 22              455                     RET
                     456     
0126 B40503          457     not_five:       CJNE  A, #05h, not_six          ;check if position is 5
0129 C2B5            458                     CLR P3.5
012B 22              459                     RET
                     460     
012C B40603          461     not_six:        CJNE A, #06h, not_seven         ;check if position is 6 
012F C2B6            462                     CLR P3.6
0131 22              463                     RET
                     464     
0132 B40703          465     not_seven:      CJNE A, #07h, not_eight         ;check if position is 7
0135 C2B7            466                     CLR P3.7
0137 22              467                     RET
                     468     
0138 B40803          469     not_eight:      CJNE A, #08h, not_nine          ;check if position is 8
013B C2A0            470                     CLR P2.0
013D 22              471                     RET     
                     472                                             
013E B409C7          473     not_nine:       CJNE A, #09h, not_zero          ;check if position is 9
0141 C2A1            474                     CLR P2.1
0143 22              475                     RET                             
                     476     ;---------------------GAME OVER-----------------------------
0144                 477     OVER:                   
                     478                     end
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE    10

XREF SYMBOL TABLE LISTING
---- ------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES / REFERENCES

AA . . . . . . . .  B ADDR   00C0H.2 A      203#
AC . . . . . . . .  B ADDR   00D0H.6 A      226#
ACC. . . . . . . .  D ADDR   00E0H   A      127# 317 351 370 382
AD0BUSY. . . . . .  B ADDR   00E8H.4 A      243#
AD0EN. . . . . . .  B ADDR   00E8H.7 A      246#
AD0INT . . . . . .  B ADDR   00E8H.5 A      244#
AD0LJST. . . . . .  B ADDR   00E8H.0 A      239#
AD0STM0. . . . . .  B ADDR   00E8H.2 A      241#
AD0STM1. . . . . .  B ADDR   00E8H.3 A      242#
AD0TM. . . . . . .  B ADDR   00E8H.6 A      245#
AD0WINT. . . . . .  B ADDR   00E8H.1 A      240#
ADC0CF . . . . . .  D ADDR   00BCH   A      93#
ADC0CN . . . . . .  D ADDR   00E8H   A      135# 239 240 241 242 243 244 245 246
ADC0GTH. . . . . .  D ADDR   00C5H   A      102#
ADC0GTL. . . . . .  D ADDR   00C4H   A      101#
ADC0H. . . . . . .  D ADDR   00BFH   A      96#
ADC0L. . . . . . .  D ADDR   00BEH   A      95#
ADC0LTH. . . . . .  D ADDR   00C7H   A      104#
ADC0LTL. . . . . .  D ADDR   00C6H   A      103#
ADC1 . . . . . . .  D ADDR   009CH   A      64#
ADC1CF . . . . . .  D ADDR   00ABH   A      78#
ADC1CN . . . . . .  D ADDR   00AAH   A      77#
AMX0CF . . . . . .  D ADDR   00BAH   A      91#
AMX0SL . . . . . .  D ADDR   00BBH   A      92#
AMX1SL . . . . . .  D ADDR   00ACH   A      79#
B. . . . . . . . .  D ADDR   00F0H   A      143#
CCF0 . . . . . . .  B ADDR   00D8H.0 A      230#
CCF1 . . . . . . .  B ADDR   00D8H.1 A      231#
CCF2 . . . . . . .  B ADDR   00D8H.2 A      232#
CCF3 . . . . . . .  B ADDR   00D8H.3 A      233#
CCF4 . . . . . . .  B ADDR   00D8H.4 A      234#
CF . . . . . . . .  B ADDR   00D8H.7 A      236#
CHECK_BUTTONS. . .  C ADDR   00F3H   A      316 350 369 374 381 386 424#
CHECK_DIR. . . . .  C ADDR   0087H   A      357 362#
CHECK_LEFT_WINDOW.  C ADDR   008CH   A      362 365#
CHECK_RIGHT_WINDOW  C ADDR   00A2H   A      363 377#
CKCON. . . . . . .  D ADDR   008EH   A      51#
COUNT. . . . . . .  D ADDR   0035H   A      265# 315 349 391 392 399 400
CPRL2. . . . . . .  B ADDR   00C8H.0 A      210#
CPT0CN . . . . . .  D ADDR   009EH   A      66#
CPT1CN . . . . . .  D ADDR   009FH   A      67#
CR . . . . . . . .  B ADDR   00D8H.6 A      235#
CT2. . . . . . . .  B ADDR   00C8H.1 A      211#
CY . . . . . . . .  B ADDR   00D0H.7 A      227#
DAC0CN . . . . . .  D ADDR   00D4H   A      116#
DAC0H. . . . . . .  D ADDR   00D3H   A      115#
DAC0L. . . . . . .  D ADDR   00D2H   A      114#
DAC1CN . . . . . .  D ADDR   00D7H   A      119#
DAC1H. . . . . . .  D ADDR   00D6H   A      118#
DAC1L. . . . . . .  D ADDR   00D5H   A      117#
DELAY. . . . . . .  C ADDR   00EAH   A      356 417#
DIRECTION. . . . .  B ADDR   0020H.1 A      269# 283 362 371 383 390
DISPLAY. . . . . .  C ADDR   00FDH   A      289 323 396 431#
DPH. . . . . . . .  D ADDR   0083H   A      40#
DPL. . . . . . . .  D ADDR   0082H   A      39#
EA . . . . . . . .  B ADDR   00A8H.7 A      190#
EIE1 . . . . . . .  D ADDR   00E6H   A      133#
EIE2 . . . . . . .  D ADDR   00E7H   A      134#
EIP1 . . . . . . .  D ADDR   00F6H   A      149#
EIP2 . . . . . . .  D ADDR   00F7H   A      150#
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE    11

EMI0CF . . . . . .  D ADDR   00A3H   A      70#
EMI0CN . . . . . .  D ADDR   00AFH   A      82#
EMI0TC . . . . . .  D ADDR   00A1H   A      69#
END_GAME . . . . .  C ADDR   00D4H   A      394 402 405#
ENSMB. . . . . . .  B ADDR   00C0H.6 A      207#
ES . . . . . . . .  B ADDR   00A8H.4 A      188#
ET0. . . . . . . .  B ADDR   00A8H.1 A      185#
ET1. . . . . . . .  B ADDR   00A8H.3 A      187#
ET2. . . . . . . .  B ADDR   00A8H.5 A      189#
EX0. . . . . . . .  B ADDR   00A8H.0 A      184#
EX1. . . . . . . .  B ADDR   00A8H.2 A      186#
EXEN2. . . . . . .  B ADDR   00C8H.3 A      213#
EXF2 . . . . . . .  B ADDR   00C8H.6 A      216#
F0 . . . . . . . .  B ADDR   00D0H.5 A      225#
F1 . . . . . . . .  B ADDR   00D0H.1 A      221#
FLACL. . . . . . .  D ADDR   00B7H   A      88#
FLSCL. . . . . . .  D ADDR   00B6H   A      87#
GREATER. . . . . .  C ADDR   00B3H   A      380 386#
GREATER_L. . . . .  C ADDR   009DH   A      368 374#
IE . . . . . . . .  D ADDR   00A8H   A      75# 184 185 186 187 188 189 190
IE0. . . . . . . .  B ADDR   0088H.1 A      165#
IE1. . . . . . . .  B ADDR   0088H.3 A      167#
IP . . . . . . . .  D ADDR   00B8H   A      89# 193 194 195 196 197 198
IT0. . . . . . . .  B ADDR   0088H.0 A      164#
IT1. . . . . . . .  B ADDR   0088H.2 A      166#
LEFT_SIDE. . . . .  C ADDR   004CH   A      284 322# 352
L_CONFIG . . . . .  D ADDR   0032H   A      262# 293 295 296 327 329 330 366
L_LED. . . . . . .  C ADDR   00CAH   A      390 399#
MAIN . . . . . . .  C ADDR   0081H   A      317 351 356# 358 397
MODF . . . . . . .  B ADDR   00F8H.5 A      254#
MOV_LED. . . . . .  C ADDR   00B8H   A      370 372 375 382 384 387 390#
MOV_ON . . . . . .  C ADDR   00C5H   A      391 396# 399 413
MSTEN. . . . . . .  B ADDR   00F8H.1 A      250#
NESTED_LOOP. . . .  C ADDR   00EEH   A      419# 419
NOTEQUAL . . . . .  C ADDR   00A7H   A      378 380#
NOTEQUAL_L . . . .  C ADDR   0091H   A      366 368#
NOT_EIGHT. . . . .  C ADDR   0138H   A      465 469#
NOT_FIVE . . . . .  C ADDR   0126H   A      453 457#
NOT_FOUR . . . . .  C ADDR   0120H   A      449 453#
NOT_NINE . . . . .  C ADDR   013EH   A      469 473#
NOT_ONE. . . . . .  C ADDR   010EH   A      434 437 441#
NOT_SEVEN. . . . .  C ADDR   0132H   A      461 465#
NOT_SIX. . . . . .  C ADDR   012CH   A      457 461#
NOT_THREE. . . . .  C ADDR   011AH   A      445 449#
NOT_TWO. . . . . .  C ADDR   0114H   A      441 445#
NOT_ZERO . . . . .  C ADDR   0108H   A      437# 473
OLD_BUTTONS. . . .  D ADDR   0031H   A      261# 426 427 428
OSCICN . . . . . .  D ADDR   00B2H   A      85#
OSCXCN . . . . . .  D ADDR   00B1H   A      84#
OUTER_LOOP . . . .  C ADDR   00ECH   A      418# 420
OV . . . . . . . .  B ADDR   00D0H.2 A      222#
OVER . . . . . . .  C ADDR   0144H   A      410 414 477#
P. . . . . . . . .  B ADDR   00D0H.0 A      220#
P0 . . . . . . . .  D ADDR   0080H   A      37#
P0MDOUT. . . . . .  D ADDR   00A4H   A      71#
P1 . . . . . . . .  D ADDR   0090H   A      53# 290 324
P1MDIN . . . . . .  D ADDR   00BDH   A      94#
P1MDOUT. . . . . .  D ADDR   00A5H   A      72#
P2 . . . . . . . .  D ADDR   00A0H   A      68# 277 278 408 424 432 470 474
P2MDOUT. . . . . .  D ADDR   00A6H   A      73#
P3 . . . . . . . .  D ADDR   00B0H   A      83# 407 409 431 438 442 446 450 454 458 462 466
P3IF . . . . . . .  D ADDR   00ADH   A      80#
P3MDOUT. . . . . .  D ADDR   00A7H   A      74#
P4 . . . . . . . .  D ADDR   0084H   A      41#
P5 . . . . . . . .  D ADDR   0085H   A      42#
P6 . . . . . . . .  D ADDR   0086H   A      43#
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE    12

P7 . . . . . . . .  D ADDR   0096H   A      59#
P74OUT . . . . . .  D ADDR   00B5H   A      86#
PCA0CN . . . . . .  D ADDR   00D8H   A      120# 230 231 232 233 234 235 236
PCA0CPH0 . . . . .  D ADDR   00FAH   A      153#
PCA0CPH1 . . . . .  D ADDR   00FBH   A      154#
PCA0CPH2 . . . . .  D ADDR   00FCH   A      155#
PCA0CPH3 . . . . .  D ADDR   00FDH   A      156#
PCA0CPH4 . . . . .  D ADDR   00FEH   A      157#
PCA0CPL0 . . . . .  D ADDR   00EAH   A      137#
PCA0CPL1 . . . . .  D ADDR   00EBH   A      138#
PCA0CPL2 . . . . .  D ADDR   00ECH   A      139#
PCA0CPL3 . . . . .  D ADDR   00EDH   A      140#
PCA0CPL4 . . . . .  D ADDR   00EEH   A      141#
PCA0CPM0 . . . . .  D ADDR   00DAH   A      122#
PCA0CPM1 . . . . .  D ADDR   00DBH   A      123#
PCA0CPM2 . . . . .  D ADDR   00DCH   A      124#
PCA0CPM3 . . . . .  D ADDR   00DDH   A      125#
PCA0CPM4 . . . . .  D ADDR   00DEH   A      126#
PCA0H. . . . . . .  D ADDR   00F9H   A      152#
PCA0L. . . . . . .  D ADDR   00E9H   A      136#
PCA0MD . . . . . .  D ADDR   00D9H   A      121#
PCON . . . . . . .  D ADDR   0087H   A      44#
POSITION . . . . .  D ADDR   0030H   A      260# 288 322 365 377 393 401 405 412 433
PROCEED. . . . . .  C ADDR   0042H   A      311 315#
PROCEED_L. . . . .  C ADDR   0077H   A      345 349#
PS . . . . . . . .  B ADDR   00B8H.4 A      197#
PSCTL. . . . . . .  D ADDR   008FH   A      52#
PSW. . . . . . . .  D ADDR   00D0H   A      112# 220 221 222 223 224 225 226 227
PT0. . . . . . . .  B ADDR   00B8H.1 A      194#
PT1. . . . . . . .  B ADDR   00B8H.3 A      196#
PT2. . . . . . . .  B ADDR   00B8H.5 A      198#
PX0. . . . . . . .  B ADDR   00B8H.0 A      193#
PX1. . . . . . . .  B ADDR   00B8H.2 A      195#
RB8. . . . . . . .  B ADDR   0098H.2 A      176#
RCAP2H . . . . . .  D ADDR   00CBH   A      108#
RCAP2L . . . . . .  D ADDR   00CAH   A      107#
RCAP4H . . . . . .  D ADDR   00E5H   A      132#
RCAP4L . . . . . .  D ADDR   00E4H   A      131#
RCLK . . . . . . .  B ADDR   00C8H.5 A      215#
REF0CN . . . . . .  D ADDR   00D1H   A      113#
REN. . . . . . . .  B ADDR   0098H.4 A      178#
RI . . . . . . . .  B ADDR   0098H.0 A      174#
RIGHT_SIDE . . . .  C ADDR   0017H   A      288# 318
RS0. . . . . . . .  B ADDR   00D0H.3 A      223#
RS1. . . . . . . .  B ADDR   00D0H.4 A      224#
RSTSRC . . . . . .  D ADDR   00EFH   A      142#
RXOVRN . . . . . .  B ADDR   00F8H.4 A      253#
R_CONFIG . . . . .  D ADDR   0033H   A      263# 307 341 378
SADDR0 . . . . . .  D ADDR   00A9H   A      76#
SADDR1 . . . . . .  D ADDR   00F3H   A      146#
SADEN0 . . . . . .  D ADDR   00B9H   A      90#
SADEN1 . . . . . .  D ADDR   00AEH   A      81#
SBUF0. . . . . . .  D ADDR   0099H   A      61#
SBUF1. . . . . . .  D ADDR   00F2H   A      145#
SCON0. . . . . . .  D ADDR   0098H   A      60# 174 175 176 177 178 179 180 181
SCON1. . . . . . .  D ADDR   00F1H   A      144#
SI . . . . . . . .  B ADDR   00C0H.3 A      204#
SLVSEL . . . . . .  B ADDR   00F8H.2 A      251#
SM0. . . . . . . .  B ADDR   0098H.7 A      181#
SM1. . . . . . . .  B ADDR   0098H.6 A      180#
SM2. . . . . . . .  B ADDR   0098H.5 A      179#
SMB0ADR. . . . . .  D ADDR   00C3H   A      100#
SMB0CN . . . . . .  D ADDR   00C0H   A      97# 201 202 203 204 205 206 207
SMB0CR . . . . . .  D ADDR   00CFH   A      111#
SMB0DAT. . . . . .  D ADDR   00C2H   A      99#
SMB0STA. . . . . .  D ADDR   00C1H   A      98#
A51 MACRO ASSEMBLER  PINGPONG                                                             02/28/2024 11:36:03 PAGE    13

SMBFTE . . . . . .  B ADDR   00C0H.1 A      202#
SMBTOE . . . . . .  B ADDR   00C0H.0 A      201#
SP . . . . . . . .  D ADDR   0081H   A      38#
SPEEDY . . . . . .  C ADDR   0040H   A      309 313#
SPEEDY_L . . . . .  C ADDR   0075H   A      343 347#
SPI0CFG. . . . . .  D ADDR   009AH   A      62#
SPI0CKR. . . . . .  D ADDR   009DH   A      65#
SPI0CN . . . . . .  D ADDR   00F8H   A      151# 249 250 251 252 253 254 255 256
SPI0DAT. . . . . .  D ADDR   009BH   A      63#
SPIEN. . . . . . .  B ADDR   00F8H.0 A      249#
SPIF . . . . . . .  B ADDR   00F8H.7 A      256#
STA. . . . . . . .  B ADDR   00C0H.5 A      206#
START_SIDE . . . .  B ADDR   0020H.0 A      268# 280 281 284
STO. . . . . . . .  B ADDR   00C0H.4 A      205#
S_CONFIG . . . . .  D ADDR   0034H   A      264# 301 308 335 342
T2CON. . . . . . .  D ADDR   00C8H   A      105# 210 211 212 213 214 215 216 217
T4CON. . . . . . .  D ADDR   00C9H   A      106#
TB8. . . . . . . .  B ADDR   0098H.3 A      177#
TCLK . . . . . . .  B ADDR   00C8H.4 A      214#
TCON . . . . . . .  D ADDR   0088H   A      45# 164 165 166 167 168 169 170 171
TEN. . . . . . . .  C ADDR   00E3H   A      406 412#
TF0. . . . . . . .  B ADDR   0088H.5 A      169#
TF1. . . . . . . .  B ADDR   0088H.7 A      171#
TF2. . . . . . . .  B ADDR   00C8H.7 A      217#
TH0. . . . . . . .  D ADDR   008CH   A      49#
TH1. . . . . . . .  D ADDR   008DH   A      50#
TH2. . . . . . . .  D ADDR   00CDH   A      110#
TH4. . . . . . . .  D ADDR   00F5H   A      148#
TI . . . . . . . .  B ADDR   0098H.1 A      175#
TL0. . . . . . . .  D ADDR   008AH   A      47#
TL1. . . . . . . .  D ADDR   008BH   A      48#
TL2. . . . . . . .  D ADDR   00CCH   A      109#
TL4. . . . . . . .  D ADDR   00F4H   A      147#
TMOD . . . . . . .  D ADDR   0089H   A      46#
TMR3CN . . . . . .  D ADDR   0091H   A      54#
TMR3H. . . . . . .  D ADDR   0095H   A      58#
TMR3L. . . . . . .  D ADDR   0094H   A      57#
TMR3RLH. . . . . .  D ADDR   0093H   A      56#
TMR3RLL. . . . . .  D ADDR   0092H   A      55#
TR0. . . . . . . .  B ADDR   0088H.4 A      168#
TR1. . . . . . . .  B ADDR   0088H.6 A      170#
TR2. . . . . . . .  B ADDR   00C8H.2 A      212#
TXBSY. . . . . . .  B ADDR   00F8H.3 A      252#
WCOL . . . . . . .  B ADDR   00F8H.6 A      255#
WDTCN. . . . . . .  D ADDR   00FFH   A      158# 273 274
XBR0 . . . . . . .  D ADDR   00E1H   A      128#
XBR1 . . . . . . .  D ADDR   00E2H   A      129#
XBR2 . . . . . . .  D ADDR   00E3H   A      130# 275


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
