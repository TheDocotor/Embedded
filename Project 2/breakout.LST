C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BREAKOUT
OBJECT MODULE PLACED IN breakout.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe breakout.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include <c8051f020.h>
   2          #include <lcd.h>
   3          #include<stdio.h>
   4          #include<stdlib.h>
   5           
   6          long score_2, score, score_1, high_score = 0;
   7          sbit player_sw = P1^7;
   8          char switches, bonk = 0; 
   9          bit player, num_player = 0;
  10          int int_cnt, t_cnt, pad_w, pot_val, count = 0;
  11          char ball_1, ball_2 = 3;
  12          char xpos, ypos, xangle, yangle = 0;
  13          code unsigned char ball[] = {0x0E, 0x1F, 0x1F, 0x1F, 0x0E};
  14          code unsigned char sine[] = { 176, 217, 244, 254, 244, 217, 176, 128, 80, 39, 12, 2, 12, 39, 80, 128 };
  15          xdata unsigned char blocks_1[11][5] = {
  16                  {1, 1, 1, 1, 1},
  17                  {1, 1, 1, 1, 1},
  18                  {1, 1, 1, 1, 1},
  19                  {1, 1, 1, 1, 1},
  20                  {1, 1, 1, 1, 1},
  21                  {1, 1, 1, 1, 1},
  22                  {1, 1, 1, 1, 1},
  23                  {1, 1, 1, 1, 1},
  24                  {1, 1, 1, 1, 1},
  25                  {1, 1, 1, 1, 1},
  26                  {1, 1, 1, 1, 1}
  27              }; 
  28          xdata unsigned char blocks_2[11][5] = {
  29                  {1, 1, 1, 1, 1},
  30                  {1, 1, 1, 1, 1},
  31                  {1, 1, 1, 1, 1},
  32                  {1, 1, 1, 1, 1},
  33                  {1, 1, 1, 1, 1},
  34                  {1, 1, 1, 1, 1},
  35                  {1, 1, 1, 1, 1},
  36                  {1, 1, 1, 1, 1},
  37                  {1, 1, 1, 1, 1},
  38                  {1, 1, 1, 1, 1},
  39                  {1, 1, 1, 1, 1}
  40              };
  41          unsigned long sum = 0;
  42          sbit button = P2^6;
  43          
  44          void disp_char(unsigned char row, unsigned char col, char single_char);
  45          void disp_score(int x, int y, unsigned long score);
  46          void display();
  47          void mov_ball();
  48          unsigned char draw_ball(int x, int y);
  49          void wait_screen();
  50          void game_over();
  51          void turn_end();
  52          void draw_paddle(char x, char padd_w);
  53          
  54          //void adc_init(){
  55          //      REF0CN = 0x7;
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 2   

  56          //      ADC0CF = 0x40;
  57          //      ADC0CN = 0x8C;
  58          //      AMX0SL = 0;
  59          //}
  60          unsigned char phase = sizeof(sine)-1;   // current point in sine to output
  61          
  62          unsigned int duration = 0;              // number of cycles left to output
  63          
  64          void timer4(void) interrupt 16
  65          {
  66   1              T4CON = T4CON^0x80;
  67   1              DAC0H = sine[phase];
  68   1              if ( phase < sizeof(sine)-1 )   // if mid-cycle
  69   1              {                               // complete it
  70   2                      phase++;
  71   2              }
  72   1              else if ( duration > 0 )        // if more cycles left to go
  73   1              {                               // start a new cycle
  74   2                      phase = 0;
  75   2                      duration--;
  76   2              }
  77   1      }
  78          
  79          void pot() interrupt 15{
  80   1              
  81   1              unsigned long samp = 0;
  82   1              unsigned int D;
  83   1              AD0INT = 0;
  84   1      
  85   1              D = (ADC0L|(ADC0H << 8));
  86   1      
  87   1              samp = (89L - pad_w)*D/4096;
  88   1              sum += samp;
  89   1              count++;
  90   1              
  91   1              if(count % 7 == 0)
  92   1              {
  93   2                      pot_val = sum >> 3;
  94   2                      sum = 0;
  95   2              }
  96   1      
  97   1      }
  98          
  99          void disp_char(unsigned char row, unsigned char col, char single_char)
 100          {
 101   1              int i, j;
 102   1              unsigned char k;
 103   1              i = 128*row+col;
 104   1              j = (single_char - 0x20)*5;
 105   1              for(k = 0; k < 5; k ++) {
 106   2                      screen[i+k] = font5x8[j + k];
 107   2                      }
 108   1      }
 109          
 110          void disp_score(int x, int y, unsigned long score){
 111   1              int thou = 0;
 112   1              int hund = 0;
 113   1              int tens = 0;
 114   1              int ones = 0;
 115   1              thou = score/1000;
 116   1              score = score%1000;
 117   1              hund = score/100;
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 3   

 118   1              score = score%100;
 119   1              tens =score/10;
 120   1              ones = score%10;
 121   1              disp_char(x, y, thou + '0');
 122   1              disp_char(x, y+6, hund + '0');
 123   1              disp_char(x, y+12, tens + '0');
 124   1              disp_char(x, y+18, ones + '0');
 125   1      }
 126          
 127          void display()
 128          {
 129   1              int i;
 130   1      
 131   1              if(score > high_score)
 132   1              {
 133   2                      high_score = score;
 134   2              }
 135   1      
 136   1              
 137   1              for(i = 0; i < 82; i++)
 138   1              {
 139   2                      screen[i] |= 3;
 140   2              }
 141   1              for(i = 0; i < 8; i++)
 142   1              {
 143   2                      screen[i*128] |= 255;
 144   2                      screen[i*128 + 1] |= 255;
 145   2                      screen[i*128 + 81] |= 255;
 146   2                      screen[i*128 + 80] |= 255;
 147   2              }
 148   1              disp_char(0, 89, 'H');
 149   1              disp_char(0, 95, 'I');
 150   1              disp_char(0, 101, 'G');
 151   1              disp_char(0, 107, 'H');
 152   1              disp_char(0, 113, ':');
 153   1      
 154   1              disp_score(1, 93, high_score);
 155   1      
 156   1              disp_char(2, 87, 'S');
 157   1              disp_char(2, 93, 'C');
 158   1              disp_char(2, 99, 'O');
 159   1              disp_char(2, 105, 'R');
 160   1              disp_char(2, 111, 'E');
 161   1              disp_char(2, 117, ':');
 162   1              
 163   1              //update for two players
 164   1              disp_score(3, 93, score);
 165   1      
 166   1              disp_char(4, 99, 'P');
 167   1              disp_char(4, 105, '1');
 168   1              if(ball_1 == 3){
 169   2                      disp_char(5, 87, '*');
 170   2                      disp_char(5, 102, '*');
 171   2                      disp_char(5, 117, '*');
 172   2                      }
 173   1              else if (ball_1 == 2){
 174   2                      disp_char(5, 87, '*');
 175   2                      disp_char(5, 102, '*');
 176   2                      }
 177   1              else if(ball_1 == 1) {
 178   2                      disp_char(5, 87, '*');
 179   2                      }
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 4   

 180   1              if(num_player == 1)
 181   1              {
 182   2                      disp_char(6, 99, 'P');
 183   2                      disp_char(6, 105, '2');
 184   2              }
 185   1              if(ball_2 == 3){
 186   2                      disp_char(7, 87, '*');
 187   2                      disp_char(7, 102, '*');
 188   2                      disp_char(7, 117, '*');
 189   2                      }
 190   1              else if (ball_2 == 2){
 191   2                      disp_char(7, 87, '*');
 192   2                      disp_char(7, 102, '*');
 193   2                      }
 194   1              else if(ball_2 == 1) {
 195   2                      disp_char(7, 87, '*');
 196   2                      }
 197   1      
 198   1              //potentially update player scores here
 199   1              if(player == 0)
 200   1              {
 201   2                      disp_char(4, 93, '-');
 202   2                      disp_char(4, 111, '-');
 203   2              }
 204   1              else
 205   1              {
 206   2                      disp_char(6, 93, '-');
 207   2                      disp_char(6, 111, '-');
 208   2              }
 209   1      
 210   1              refresh_screen();
 211   1      }
 212          
 213          void wait_screen(){
 214   1              TR2 = 0;
 215   1              xpos = 40;//middle of screen
 216   1              ypos = 28;//one pixel below the bricks
 217   1              xangle = 1;
 218   1              yangle = 1;
 219   1              //blank_screen();
 220   1              
 221   1              
 222   1              disp_char(2, 30, 'P');
 223   1              disp_char(2, 36, 'R');
 224   1              disp_char(2, 42, 'E');
 225   1              disp_char(2, 48, 'S');
 226   1              disp_char(2, 54, 'S');
 227   1              disp_char(3, 30, 'S');
 228   1              disp_char(3, 36, 'T');
 229   1              disp_char(3, 42, 'A');
 230   1              disp_char(3, 48, 'R');
 231   1              disp_char(3, 54, 'T');
 232   1              //refresh_screen();
 233   1              //display();
 234   1              if(ball_1 == 3 && ball_2 == 3){ 
 235   2                      while (button == 1){
 236   3                      pad_w = P1&3;
 237   3                      num_player = player_sw;
 238   3                      
 239   3                              }
 240   2                      if(pad_w == 3){
 241   3                              pad_w = 24;
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 5   

 242   3                      }
 243   2                      else{
 244   3                              pad_w = pad_w*4 +8;
 245   3                      }
 246   2      
 247   2                      if(num_player == 0){
 248   3                      ball_2 = 0;
 249   3                      }
 250   2              }
 251   1              else{
 252   2                      while (button == 1){};
 253   2              }
 254   1              TR2 = 1;        
 255   1      }
 256          
 257          
 258          void game_over()
 259          {
 260   1              TR2 = 0;
 261   1      
 262   1              //blank_screen();
 263   1              disp_char(2, 30, 'G');
 264   1              disp_char(2, 36, 'A');
 265   1              disp_char(2, 42, 'M');
 266   1              disp_char(2, 48, 'E');
 267   1              disp_char(3, 30, 'O');
 268   1              disp_char(3, 36, 'V');
 269   1              disp_char(3, 42, 'E');
 270   1              disp_char(3, 48, 'R');
 271   1      
 272   1              disp_char(0, 89, 'H');
 273   1              disp_char(0, 95, 'I');
 274   1              disp_char(0, 101, 'G');
 275   1              disp_char(0, 107, 'H');
 276   1              disp_char(0, 113, ':');
 277   1      
 278   1              //disp_score(1, 93, high_score);
 279   1      
 280   1              disp_char(2, 87, 'S');
 281   1              disp_char(2, 93, 'C');
 282   1              disp_char(2, 99, 'O');
 283   1              disp_char(2, 105, 'R');
 284   1              disp_char(2, 111, 'E');
 285   1              disp_char(2, 117, ':');
 286   1              
 287   1              //update for two players
 288   1              //disp_score(3, 93, score);
 289   1              refresh_screen();
 290   1              while(1){}
 291   1              //display();
 292   1      }
 293          
 294          void turn_end()
 295          {
 296   1              t_cnt = 50;
 297   1              if(num_player == 1){
 298   2                      
 299   2                      if(player == 0){
 300   3                              ball_1 = ball_1 -1;
 301   3                              player = 1;
 302   3                              score_1 = score;
 303   3                              score = score_2;
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 6   

 304   3                      }
 305   2                      else{
 306   3                              if(ball_2 == 1){
 307   4                                      game_over();}
 308   3                              else{
 309   4                                      ball_2 = ball_2 -1;
 310   4                                      player = 0;
 311   4                                      score_2 = score;
 312   4                                      score = score_1;
 313   4                              }
 314   3                      }
 315   2              }
 316   1      
 317   1              else{
 318   2                      if(ball_1 == 1){
 319   3                              game_over();}
 320   2                      else{
 321   3                              ball_1 = ball_1 -1;
 322   3                              }
 323   2              }
 324   1              wait_screen();
 325   1      }
 326          
 327          void draw_bricks(){
 328   1              int i;
 329   1              int j;
 330   1              int k;
 331   1              xdata unsigned char blocks[11][5] = {0};
 332   1              if(player == 0)
 333   1              {
 334   2                      for(i= 0; i < 11; i ++)
 335   2                      {
 336   3                              for(j = 0; j < 5; j ++)
 337   3                              {
 338   4                                      blocks[i][j] = blocks_1[i][j];
 339   4                              }
 340   3                      }               
 341   2              }
 342   1              else
 343   1              {
 344   2                      for(i= 0; i < 11; i ++)
 345   2                      {
 346   3                              for(j = 0; j < 5; j ++)
 347   3                              {
 348   4                                      blocks[i][j] = blocks_2[i][j];
 349   4                              }
 350   3                      }       
 351   2              }
 352   1      
 353   1              for(i= 0; i < 11; i ++)
 354   1              {
 355   2                      for(j = 0; j < 5; j ++)
 356   2                      {
 357   3                              if(blocks[i][j] == 1)
 358   3                              {
 359   4                                      if(j%2 == 1)
 360   4                                      {
 361   5                                              for(k = 0; k < 6; k++)
 362   5                                              {
 363   6                                                      screen[((j-1)/2)*128 + i*7 +k +131] |= 0x70;
 364   6                                              }
 365   5                                      }
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 7   

 366   4                                      else
 367   4                                      {
 368   5                                              for(k = 0; k < 6; k++)
 369   5                                              {
 370   6                                                      screen[(j/2)*128 + i*7 + k +131] |= 0x07;
 371   6                                              }
 372   5                                      }
 373   4                              }
 374   3                              else
 375   3                              {
 376   4                                      if(j%2 == 1)
 377   4                                      {
 378   5                                              for(k = 0; k < 6; k++)
 379   5                                              {
 380   6                                                      screen[(j-1)/2*128 + i*7 + k + 131] &= 0x07;
 381   6                                              }
 382   5                                      }
 383   4                                      else
 384   4                                      {
 385   5                                              for(k = 0; k < 6; k++)
 386   5                                              {
 387   6                                                      screen[j/2*128 + i*7 + k + 131] &= 0x70;
 388   6                                              }
 389   5                                      }
 390   4                              }
 391   3                      }
 392   2              }
 393   1      }
 394          
 395          void draw_paddle(char x, char padd_w)
 396          {
 397   1              int i;
 398   1              pad_w = (int)pad_w;
 399   1              for(i = 0; i < padd_w; i ++)
 400   1              {
 401   2                      screen[898+x+i] |= 0xc0;
 402   2              }
 403   1      }
 404          
 405          unsigned char draw_ball(int x, int y)
 406          {       unsigned char row, col, shift, j, hit;
 407   1              int i;
 408   1              if((x<5 || x > 78) && y < 3)
 409   1              {
 410   2                      yangle = -1*yangle;
 411   2                      xangle = -1*xangle;
 412   2                      //return 0;
 413   2              }
 414   1              else if(x<5 || x > 78)
 415   1              {
 416   2                      xangle = -1*xangle;
 417   2                      //return 0;
 418   2              }
 419   1      
 420   1              else if (y < 3)
 421   1              {
 422   2                      yangle = -1*yangle;
 423   2                      //return 0;
 424   2              }
 425   1              else if(y > 61)
 426   1              {
 427   2                      turn_end();
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 8   

 428   2                      //return 0;
 429   2              }
 430   1              col = x-2;
 431   1              row = y - 2;
 432   1              shift = row%8;
 433   1              row = row/8;
 434   1              //row >> 3;
 435   1              hit = 0;
 436   1              for(j = 0, i = row*128+col; j < 5; i++, j++)
 437   1              {
 438   2                      int mask = (int)ball[j] << shift;
 439   2                      hit |= screen[i]&(unsigned char)mask;
 440   2                      screen[i] |= mask;
 441   2      
 442   2                      if(mask & 0xFF00)
 443   2                      {
 444   3                              hit |= screen[i+128]&(unsigned char)(mask >> 8);
 445   3                              screen[i + 128] |= (unsigned char)(mask >> 8);
 446   3                      }
 447   2              }
 448   1              if( y == 60 && hit > 0){
 449   2      
 450   2                      char col = xpos - pot_val -2;
 451   2                      int div = pad_w/4;
 452   2                      if( col < div || col > 3*div)
 453   2                      {
 454   3                              xangle = 2;
 455   3                              yangle = -1;
 456   3                      }
 457   2                      else
 458   2                      {
 459   3                              xangle = 1;
 460   3                              yangle = -2;
 461   3                      }
 462   2                      if(col < div *2)
 463   2                      {
 464   3                              xangle = -1*xangle;
 465   3                      }
 466   2                      //score += 1;
 467   2                      return -1;
 468   2              }
 469   1              else if( hit > 0)
 470   1              {
 471   2                      
 472   2                      int x_b, y_b;
 473   2                      score += 1;
 474   2                      if(yangle < 0)
 475   2                      {
 476   3                              y_b = (ypos -11)/4;
 477   3                      }
 478   2                      else{
 479   3                              y_b = (ypos -7)/4;
 480   3                      }
 481   2      
 482   2                      //if(xangle < 0)
 483   2                      //{
 484   2                              //x_b = (xpos -6)/7;
 485   2                      //}
 486   2                      //else
 487   2                      //{
 488   2                              x_b = (xpos -4)/7;
 489   2                      //}
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 9   

 490   2                      
 491   2                              
 492   2                      if(player == 0)
 493   2                      {
 494   3                              if(blocks_1[x_b][y_b] == 0)
 495   3                                      {
 496   4                                              if(xangle < 0)
 497   4                                                      {
 498   5                                                              blocks_1[x_b-1][y_b] = 0;
 499   5                                                      }
 500   4                                              else
 501   4                                                      {
 502   5                                                              blocks_1[x_b+1][y_b] = 0;
 503   5                                                      }
 504   4                                              xangle = -1*xangle;
 505   4                                      }
 506   3                              else
 507   3                              {
 508   4                                      blocks_1[x_b][y_b] = 0;
 509   4                                      yangle = -1*yangle;
 510   4                              }
 511   3                      }
 512   2                      else
 513   2                      {
 514   3                              if(blocks_2[x_b][y_b] == 0)
 515   3                              {
 516   4                                      y_b = (ypos -9)/4;
 517   4                                      if(xangle < 0)
 518   4                                      {
 519   5                                              blocks_2[x_b-1][y_b] = 0;
 520   5                                      }
 521   4                                      else
 522   4                                      {
 523   5                                              blocks_2[x_b+1][y_b] = 0;
 524   5                                      }
 525   4                                              xangle = -1*xangle;
 526   4                              }
 527   3                              else
 528   3                              {
 529   4                                      blocks_2[x_b][y_b] = 0;
 530   4                                      yangle = -1*yangle;
 531   4                              }       
 532   3                      }
 533   2                      if(y_b <= 3)
 534   2                      {
 535   3                              t_cnt = 40;
 536   3                      }
 537   2              }
 538   1              return hit;
 539   1      }
 540          
 541          
 542          void mov_ball() {
 543   1              xpos += xangle;
 544   1              ypos += yangle;
 545   1              bonk = draw_ball(xpos, ypos);
 546   1              display();
 547   1      }
 548          
 549          void timer2(void) interrupt 5
 550          {
 551   1              
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 10  

 552   1              TF2 = 0;
 553   1              int_cnt ++;
 554   1              if(int_cnt==t_cnt) {
 555   2                      blank_screen();
 556   2                      draw_paddle(pot_val, pad_w);
 557   2                      draw_bricks();
 558   2                      if(bonk > 0){
 559   3                              RCAP4L = -144;                          // set up for 800Hz
 560   3                              duration = 800;                         // one second
 561   3                      }
 562   2                      else if(bonk ==-1)
 563   2                      {
 564   3                              RCAP4L = -181;                          // set up for 800Hz
 565   3                              duration = 800;
 566   3                      }
 567   2                      mov_ball();
 568   2                      int_cnt = 0;
 569   2              }
 570   1                      
 571   1      }
 572          
 573          
 574          
 575          
 576          
 577          void main()
 578          {
 579   1              WDTCN = 0xde; //disable watchdog
 580   1              WDTCN = 0xad;
 581   1              XBR2 = 0x40;  //port output
 582   1              //XBR0 = 4;       //enable uart 0
 583   1              OSCXCN = 0x67; //crystal enabled
 584   1              TMOD = 0x20;  //wait 1ms: T1 mode 2
 585   1              TH1 = 167;        // 1ms/(1/(2Mhz/12)) = 166.666
 586   1              TR1 = 1;
 587   1              while( TF1 == 0) {}     //1 ms wait for flag
 588   1              while( !(OSCXCN & 0x80)) {} //stabilize crystal
 589   1              OSCICN = 8;   // switch to 22.1184Mhz
 590   1              //SCON0 = 0x50; //8-bit, var baud, recieve enable
 591   1              //TH1 = -6;             //9600 baud
 592   1              
 593   1              IE = 0xA0;
 594   1              EIE2 = 0x06; //Timer 4 and ADC
 595   1              
 596   1              T4CON = 0x00; //timer 4, auto reload
 597   1              RCAP4H = -1;    //timer 4
 598   1              RCAP4L = -144;  //timer 4
 599   1              //REF0CN = 3;           //set up refrence voltage
 600   1              DAC0CN = 0x9C;  //DAC0CN
 601   1      
 602   1              T2CON = 0x00;
 603   1              RCAP2H = -2211 >> 8;
 604   1              RCAP2L = -2211;
 605   1      
 606   1              ADC0CN = 0x8c;
 607   1              REF0CN = 0x07;
 608   1              ADC0CF = 0x40;
 609   1              AMX0SL = 0x0;
 610   1              CKCON = 0x40;
 611   1              //EXF2 = 1;
 612   1              TR2 = 1;
 613   1              T4CON = T4CON^0x04;
C51 COMPILER V9.59.0.0   BREAKOUT                                                          04/16/2024 11:22:19 PAGE 11  

 614   1              
 615   1              init_lcd();
 616   1              t_cnt = 50; //change depending on switches
 617   1              xpos = 36;//middle of screen
 618   1              ypos = 24;//one pixel below the bricks
 619   1      
 620   1              xangle = 1;
 621   1              yangle = 1;
 622   1              pad_w = 8;
 623   1              ball_1 = 3;
 624   1              ball_2 = 3;
 625   1              draw_ball(xpos, ypos);
 626   1              //draw_bricks();
 627   1              display();
 628   1              wait_screen();
 629   1              
 630   1              
 631   1              
 632   1              
 633   1              while(1)
 634   1              {
 635   2                      
 636   2              }
 637   1      
 638   1      
 639   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3575    ----
   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =    110      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     41      43
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
